# -*- coding: utf-8 -*-
"""Disease_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1436h-PxkoUi9wuD2TbW0j2SV7YfzkFV9
"""

import cv2
import numpy as np

def detect_plant_diseases(image_path):
    """
    Detect disease spots and blisters on plant leaves
    Parameters:
        image_path: Path to the input image
    Returns:
        Annotated image with detected disease spots
    """
    # Read the image
    image = cv2.imread(image_path)
    if image is None:
        raise ValueError("Could not read the image")

    # Convert to HSV color space for better color segmentation
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Define color ranges for common disease spots
    # Brown/rust colored spots
    lower_brown = np.array([10, 60, 20])
    upper_brown = np.array([20, 255, 200])

    # Yellow/chlorotic areas
    lower_yellow = np.array([20, 40, 40])
    upper_yellow = np.array([30, 255, 255])

    # Create masks for different colors
    mask_brown = cv2.inRange(hsv, lower_brown, upper_brown)
    mask_yellow = cv2.inRange(hsv, lower_yellow, upper_yellow)

    # Combine masks
    combined_mask = cv2.bitwise_or(mask_brown, mask_yellow)

    # Apply morphological operations to clean up the mask
    kernel = np.ones((3,3), np.uint8)
    mask_cleaned = cv2.morphologyEx(combined_mask, cv2.MORPH_OPEN, kernel, iterations=2)
    mask_cleaned = cv2.morphologyEx(mask_cleaned, cv2.MORPH_CLOSE, kernel, iterations=2)

    # Find contours in the cleaned mask
    contours, hierarchy = cv2.findContours(mask_cleaned, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Filter contours based on area and shape
    min_area = 50  # Minimum area to be considered a disease spot
    max_area = 5000  # Maximum area to avoid detecting entire leaf
    filtered_contours = []

    for cnt in contours:
        area = cv2.contourArea(cnt)
        if min_area < area < max_area:
            # Calculate circularity
            perimeter = cv2.arcLength(cnt, True)
            circularity = 4 * np.pi * area / (perimeter * perimeter) if perimeter > 0 else 0

            # Disease spots tend to be somewhat circular
            if 0.2 < circularity < 1.0:
                filtered_contours.append(cnt)

    # Create result image
    result = image.copy()

    # Draw contours and add information
    for i, cnt in enumerate(filtered_contours):
        # Draw contour
        cv2.drawContours(result, [cnt], -1, (0, 0, 255), 2)

        # Calculate and draw center point
        M = cv2.moments(cnt)
        if M["m00"] != 0:
            cx = int(M["m10"] / M["m00"])
            cy = int(M["m01"] / M["m00"])

            # Draw circle at center
            cv2.circle(result, (cx, cy), 3, (255, 0, 0), -1)

            # Add area information
            area = cv2.contourArea(cnt)
            cv2.putText(result, f'{area:.0f}px', (cx-20, cy-20),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

    # Add detection summary
    cv2.putText(result, f'Detected: {len(filtered_contours)} spots',
                (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    return result


def main():
    from google.colab.patches import cv2_imshow

    image_path = '/content/hdyvfh5b5l.jpg'
    result = detect_plant_diseases(image_path)
    cv2_imshow(result)

if __name__ == "__main__":
    main()